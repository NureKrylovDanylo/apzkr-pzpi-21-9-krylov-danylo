Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система управління складом 

Студент гр. ПЗПІ-21-9
Крилов Данило                ________________
                                                                           (підпис)
	Керівник роботи                          ________________ 
                                                                            (підпис)
						      Роботу захищено «__»________ 2024р. 
						        з оцінкою     __________________

	Комісія:








Харків 2024 р.
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук Кафедра програмної інженерії
 Спеціальність 121 – Інженерія програмного забезпечення
Курс	3	Семестр	6	.
Навчальна дисципліна Архітектура програмного забезпечення


ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ


1.	Тема проекту: Система управління складом
2.	Термін узгодження завдання з лабораторних робіт «_15_»_березня 2024р.
3.	Термін здачі завдання з курсової роботи «25» травня 2024р..
4.	Вихідні дані до проекту: методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5.	Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Vision and Scope document, звіт по серверній частині, звіт по візуальній частині, звіт по IoT.
 
КАЛЕНДАРНИЙ ПЛАН





№	Назви етапів лабораторних робіт	Термін виконання етапів роботи	Примітка
1	Функціональна специфікація програмного проекту	06.04.2024 p.	виконано
2	Проектування програмного проекту	20.04.2024 р.	виконано
3	Кодування програмного проекту	25.05.2024 р.	виконано
4	Оформлення пояснювальної записки	12.05.2024 р.	виконано
5	Захист курсової роботи	26.06.2024 р.	виконано


Дата видачі теми проекту у «30» березня 2024 р


Викладач лабораторних робіт	 	
(підпис)


Завдання прийняв до виконання
ст.гр. ПЗПІІ-21-9 Крилов Данило	 		
 	 (підпис)





РЕФЕРАТ


	Пояснювальна записка з курсової роботи: 32 сторінок, 3 рисунки, 12 джерел.
	АСИНХРОННА ВЗАЄМОДІЯ, ASP.NET CORE, CRUD-ОПЕРАЦІЇ, ENTITY FRAMEWORK CORE, ЕМУЛЯЦІЯ ДАТЧИКІВ, HTTP-ЗАПИТИ, ІНТЕРНЕТ РЕЧЕЙ (IoT), КОМПОНЕНТНИЙ ПІДХІД, REACT, СЕРВЕРНА ЧАСТИНА, СИСТЕМА УПРАВЛІННЯ СКЛАДОМ, TYPESCRIPT, ВИСОКА ПРОДУКТИВНІСТЬ, ВІЗУАЛЬНИЙ ІНТЕРФЕЙС, WPF.
	Об’єктом дослідження стане предметна область пов’язана з управлінням складом.
	За мету курсової роботи поставлено розробку програмної системи управління складом.
	Розроблена на ASP.NET Core, серверна частина забезпечує надійну та масштабовану базу для обробки даних складських операцій. Використано Entity Framework Core для взаємодії з базою даних, що дозволяє виконувати CRUD-операції та забезпечує високий рівень продуктивності та безпеки.
Фронтенд системи реалізовано на основі React з використанням TypeScript. Це дозволило створити динамічний та інтуїтивний інтерфейс користувача, який забезпечує зручне управління складськими операціями.
Для емуляції IoT датчиків використано WPF, що дозволяє симулювати збір даних з поличок складу. Ці дані передаються до серверної частини через HTTP-запити, що дозволяє відстежувати реальний час зняття товарів з поличок. 
 
ЗМІСТ


ВСТУП	5
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ	8
2 ПОСТАНОВКА ЗАДАЧІ	10
2.1 Основний функціонал системи	10
2.2 Допущення та залежності	10
2.3 Релізи	12
2.4 Користувацькі обмеження	12
3.1 Серверна частина системи	18
3.2 Візуальна частина системи	19
3.3 IoT частина системи	20
4 СТРУКТУРА БАЗИ ДАНИХ	22
4.1 ER-моделювання	22
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ	26
5.1 Backend	26
5.2 Frontend	27
5.3 IoT	28
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ	29
ВИСНОВКИ	30
ПЕРЕЛІК ДЖЕРЕЛ	31


ВСТУП


Система управління складом є критично важливим інструментом для ефективної організації та контролю складських операцій. Вона дозволяє автоматизувати та оптимізувати процеси управління запасами, забезпечуючи точне відстеження руху товарів, зменшення витрат і підвищення продуктивності. З розвитком технологій Інтернету речей (IoT) і сучасних веб-технологій, таких як ASP.NET Core і React, з'явилася можливість створення інтегрованих, масштабованих і продуктивних рішень, що забезпечують більш високий рівень автоматизації та контролю.
Основна мета системи управління складом — забезпечити ефективне управління запасами, оптимізувати логістичні процеси та зменшити операційні витрати. Завдяки використанню сучасних технологій, система може надавати реальний час інформацію про стан запасів, дозволяючи приймати обґрунтовані рішення та швидко реагувати на зміни в попиті та пропозиції.
Система складається з трьох основних компонентів: серверної частини, візуального інтерфейсу та IoT компонентів. Серверна частина розроблена на базі ASP.NET Core, що забезпечує надійність та масштабованість. Візуальний інтерфейс побудований з використанням React і TypeScript, що дозволяє створювати динамічні та інтерактивні інтерфейси користувача. IoT компоненти, реалізовані на базі WPF, дозволяють емуляцію збору даних з поличок складу, забезпечуючи точне відстеження руху товарів.
Впровадження системи управління складом на основі сучасних технологій дозволяє значно підвищити ефективність складських операцій, забезпечити точне відстеження запасів, автоматизувати рутинні процеси та покращити загальну продуктивність. Це, в свою чергу, сприяє зниженню операційних витрат, підвищенню рівня обслуговування клієнтів і забезпеченню конкурентних переваг на ринку.
Розробка інтегрованої системи управління складом з використанням ASP.NET Core, React та WPF відкриває нові можливості для оптимізації складських процесів. Завдяки використанню IoT компонентів система може забезпечити більш точне та ефективне управління запасами, що є важливим кроком до автоматизації та підвищення продуктивності у сучасному бізнес-середовищі. 
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ


Система управління складом (WMS - Warehouse Management System) є складним програмним рішенням, яке автоматизує процеси управління складськими операціями. Це включає прийом, зберігання, відвантаження товарів та інвентаризацію. Сучасні WMS використовують технології Інтернету речей (IoT), автоматизацію, інтеграцію з ERP-системами (Enterprise Resource Planning) та аналітику даних для підвищення ефективності та точності складських операцій.
Основні компоненти системи управління складом:
	Приймання товару:
	Процеси: приймання товару на склад, перевірка кількості та якості, реєстрація в системі.
	Технології: сканери штрих-кодів, RFID-теги для автоматичної ідентифікації.
	Зберігання товару:
	Процеси: розміщення товару на поличках, управління запасами, контролювання умов зберігання.
	Технології: системи відстеження місцезнаходження, автоматизовані склади (AS/RS).
Відвантаження товару:
	Процеси: підготовка замовлень, пакування, маркування, відвантаження клієнтам.
	Технології: автоматизовані системи комплектування замовлень, роботи-пікери.
Інвентаризація:
	Процеси: регулярні перевірки запасів, коригування записів, контроль за втратами.
	Технології: мобільні пристрої для проведення інвентаризації, інтеграція з ERP.
Виклики та можливості:
	Оптимізація простору: забезпечення ефективного використання складських площ, автоматизація процесів розміщення та переміщення товарів.
	Точність інвентаризації: зменшення помилок при обліку товарів, запобігання втратам та надлишкам.
	Підвищення продуктивності: автоматизація рутинних завдань, зниження ручної праці, підвищення швидкості обробки замовлень.
	Інтеграція з іншими системами: забезпечення безшовної інтеграції з ERP, CRM (Customer Relationship Management), транспортними системами для координації ланцюга поставок.
Аналіз предметної області показує, що система управління складом є критичним компонентом сучасного логістичного ланцюга. Впровадження IoT, автоматизації та інтеграції з іншими системами дозволяє досягти значних покращень в ефективності, точності та продуктивності складських операцій. Це, в свою чергу, сприяє зниженню витрат, покращенню обслуговування клієнтів та забезпеченню конкурентоспроможності компанії на ринку.
 
2 ПОСТАНОВКА ЗАДАЧІ
2.1 Основний функціонал системи

Визначимо основні особливості майбутньої системи.
FE-1: Облік замовників.
FE-2: Облік товарів на складі.
FE-3: Облік замовлень користувачів.
FE-4: Менеджмент способів доставки..
FE-5: Розподілення товарів за категоріями.
FE-6: Розподілення товарів на складі за позицією.
FE-7: Автоматизація процесу видачі товару.


2.2 Допущення та залежності


Припущення:
	Технологічна інфраструктура: Всі користувачі матимуть доступ до необхідного апаратного та програмного забезпечення, включаючи стабільний інтернет-зв'язок та сучасні веб-браузери.
	Доступність IoT пристроїв: Необхідне обладнання для автоматизації процесу видачі товару буде доступне і правильно інтегроване в систему.
	Користувацькі навички: Користувачі системи (адміністратори, менеджери складу, оператори) матимуть базові комп'ютерні навички та отримають відповідне навчання для роботи з новою системою.
	Захист даних: Буде забезпечено високий рівень безпеки для захисту конфіденційної інформації про користувачів та товари.
Залежності:
	Інтеграція з іншими системами: Система може потребувати інтеграції з існуючими ERP (Enterprise Resource Planning) системами, CRM (Customer Relationship Management) системами та іншими внутрішніми корпоративними системами.
	Зовнішні постачальники: Доставка та облік товарів можуть залежати від зовнішніх постачальників, що потребуватиме узгодження та стандартизації процесів.
	Регуляторні вимоги: Система повинна відповідати всім законодавчим та регуляторним вимогам, що стосуються управління даними, зокрема політикам зберігання та обробки персональних даних.
	Технічна підтримка: Наявність постійної технічної підтримки для забезпечення безперебійної роботи системи та своєчасного вирішення технічних проблем.
	Оновлення програмного забезпечення: Систематичні оновлення та вдосконалення програмного забезпечення для забезпечення безпеки та впровадження нових функціональних можливостей.
Ці припущення та залежності є критичними для успішного впровадження та функціонування інтегрованої системи управління складом. Вони забезпечують основу для планування ресурсів та визначення ключових факторів, що можуть вплинути на реалізацію проекту.

 
2.3 Релізи


Перший випуск програми повинен включати включати в себе реалізацію серверної та візуальної частини системи:
FE-1: Облік замовників.
FE-2: Облік товарів на складі.
FE-3: Облік замовлень користувачів..
FE-4: Менеджмент способів доставки..
FE-5: Розподілення товарів за категоріями.
Наступні випуски програми повинен включати включати в себе реалізацію серверної та візуальної частини системи:
FE-6: Розподілення товарів на складі за позицією.
Також слід реалізувати необхідний функціонал для серверної та IoT частини системи:
FE-7: Автоматизація процесу видачі товару.


2.4 Користувацькі обмеження


Обмеження:
	Бюджет на розробку, впровадження та підтримку системи обмежений, що може вплинути на вибір технологій, інфраструктури та обсяг функціоналу.
	Система буде працювати лише на визначених версіях операційних систем, веб-браузерів та мобільних пристроїв. Не буде підтримки для застарілих платформ та програмного забезпечення.
	Пропускна здатність мережі та швидкість інтернет-з'єднання можуть обмежувати продуктивність системи, особливо у віддалених або сільських районах.
	Обмеження на обсяг даних, що можуть бути збережені та оброблені системою, зважаючи на доступні серверні ресурси та сховища даних.
	Політика конфіденційності та захисту даних може обмежувати збір та обробку певних типів інформації про користувачів та замовлення.
	Інтеграційні обмеження:
	Можливості інтеграції з існуючими системами можуть бути обмежені через відмінності у технологічних платформах та відсутність стандартів обміну даними.
	Обмеження на взаємодію з зовнішніми системами доставки та постачальниками, які можуть мати власні технічні та організаційні вимоги.
	Кількість користувачів, які можуть одночасно працювати в системі, обмежена продуктивністю серверів та ліцензійними угодами.
	Необхідність навчання користувачів для роботи з новою системою може обмежити швидкість її впровадження та прийняття в організації.
Виключення:
	Система не буде підтримувати застарілі операційні системи, веб-браузери та мобільні платформи, що не відповідають мінімальним технічним вимогам.
	Функціональні можливості, що не є критичними для основних бізнес-процесів, будуть виключені з початкового релізу. Це може включати додаткові аналітичні інструменти, розширену звітність або інтеграцію з рідкісними зовнішніми сервісами.
	Підтримка багатомовності та різних валют може бути обмежена до основних мов і валют, що використовуються в поточних бізнес-операціях. Додаткові мови та валюти можуть бути впроваджені в майбутніх версіях.
	Використання найновіших технологій, які ще не пройшли достатнє тестування на стабільність та безпеку, буде обмежене або виключене з початкового релізу системи.
Інтеграція з нестандартними або специфічними для певних галузей системами та обладнанням, які не є широко використовуваними, не буде включена в початкову версію системи. 
3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ


Наведемо структуру проекту на діаграмі пакетів (див. рис. 1.1).

 
Рисунок 1.1 – Діаграма пакетів
На діаграмі можна побачити 4 компоненти системи:
	Серверна частина (заплановано на перші випуски)
	Візуальна частина (заплановано на перші випуски)
	IoT частина (заплановано на перші випуски)
	Мобільна частина (заплановано на наступні випуски)
В наступних розділах наведемо опис кожного компоненту системи, який заплановано на перші випуски.
На рисунку 1.2 представлена діаграма варіантів використання (use case diagram), яка демонструє ключові функціональні можливості системи управління складом. Ця діаграма включає основні дії, які може виконувати користувач системи, а також додаткові функції, що розширюють базові операції.

 
Рисунок 1.2 – Діаграма варіантів використання.

Опис елементів діаграми:
Актор – користувач системи:
	Представлений у вигляді фігури людини в центрі діаграми.
	Це може бути адміністратор складу, який має доступ до всіх функціональних можливостей системи.
Варіанти використання:
Перегляд інформації:
	Основна функція, яка дозволяє користувачеві переглядати дані про товари, замовлення, користувачів тощо.
	Цей варіант використання розширюється (extend) додатковими можливостями, такими як сортування, фільтрація та пошук інформації.
Сортування:
Дозволяє впорядкувати інформацію за певними критеріями (наприклад, за датою, ціною, назвою).
Фільтрація:
Дозволяє відбирати інформацію за певними умовами (наприклад, тільки доступні товари, товари зі знижкою).
Пошук:
Дозволяє знаходити конкретні записи в системі за ключовими словами або іншими параметрами.
Додавання інформації:
Дозволяє користувачеві вводити нові дані в систему (наприклад, нові товари, нові замовлення).
Редагування інформації:
Дозволяє змінювати існуючі дані в системі.
Видалення інформації:
Дозволяє видаляти записи з системи.
Аналіз інформації:
Дозволяє користувачеві проводити аналітичні операції з даними, отримувати статистичну інформацію.
Розширюється можливостями створення звітів та запитів на статистику.
Звіти:
Генерація різних звітів на основі даних системи (наприклад, звіти про продажі, звіти про залишки товарів на складі).
Запити на статистику:
Дозволяє отримувати детальні статистичні дані на основі наявної інформації.
Автоматизація:
Дозволяє автоматизувати певні процеси в системі (наприклад, автоматичне оновлення залишків, сповіщення про необхідність поповнення запасів).


3.1 Серверна частина системи


Система управління складом повинна забезпечувати високий рівень надійності та захисту даних, включаючи механізми аутентифікації та авторизації користувачів. Важлива масштабованість для обробки зростаючих обсягів даних та збільшення кількості користувачів, а також інтеграція з іншими корпоративними системами, такими як ERP та CRM.
Функціональні вимоги включають облік замовників з можливістю зберігання, додавання, редагування, видалення та перегляду інформації про них. Облік товарів на складі передбачає ведення детальної інформації про всі товари, з аналогічними можливостями управління записами. Для обліку замовлень користувачів необхідна реєстрація та облік замовлень з можливістю перегляду їх деталей, статусів та історії змін. Менеджмент способів доставки повинен забезпечити зберігання та управління інформацією про способи доставки, включаючи додавання, редагування, видалення та перегляд. Розподілення товарів за категоріями дозволяє класифікувати товари для зручності управління з аналогічними функціями управління записами. Управління розміщенням товарів на складі з точністю до конкретних позицій також повинно включати можливості додавання, редагування, видалення та перегляду позицій. Автоматизація процесу видачі товару передбачає використання IoT датчиків для автоматичного відстеження моменту зняття товару з полички та інтеграцію з центральною системою для автоматичного оновлення статусу товару.
Нефункціональні вимоги включають продуктивність, що забезпечує швидкий відгук та обробку запитів користувачів; юзабіліті, що передбачає інтуїтивно зрозумілий та зручний інтерфейс користувача; відмовостійкість, що забезпечує безперервну роботу системи та можливість швидкого відновлення після збоїв; і документованість, яка передбачає наявність повної технічної та користувацької документації для легкої підтримки та використання системи.


3.2 Візуальна частина системи


Frontend-частина системи управління складом повинна бути інтуїтивно зрозумілою та зручною для користувачів. Важливо використовувати компонентний підхід, який дозволить створювати незалежні модулі, що полегшить повторне використання коду та його підтримку. TypeScript забезпечить статичну типізацію, допомагаючи виявляти помилки на ранніх етапах розробки та покращуючи якість коду.
Необхідне ефективне управління глобальним станом додатку за допомогою Redux або Context API. Це дозволить централізовано обробляти дані та взаємодії між компонентами. Використання React Router забезпечить плавну навігацію між різними розділами додатку без перезавантаження сторінок.
Асинхронна взаємодія з сервером за допомогою Axios або Fetch API дозволить динамічно отримувати та відправляти дані. Інтерфейс повинен бути адаптивним, забезпечуючи коректне відображення на різних пристроях, таких як настільні комп’ютери, планшети та мобільні телефони.
Особливу увагу потрібно приділити безпеці веб-додатків, включаючи захист від XSS та CSRF атак. Інтерфейс повинен забезпечувати швидкий відгук на дії користувачів, мінімізуючи затримки при обробці запитів. Автоматизоване тестування та використання інструментів налагодження допоможе забезпечити якість та стабільність коду.
Функціональні вимоги включають облік замовників із можливістю додавання, редагування, видалення та перегляду записів; облік товарів на складі з аналогічними функціями; реєстрацію та облік замовлень користувачів; менеджмент способів доставки; класифікацію товарів за категоріями; управління розміщенням товарів на складі; автоматизацію процесу видачі товару за допомогою IoT датчиків та інтеграцію з центральною системою для автоматичного оновлення статусу товару.

3.3 IoT частина системи


IoT пристрої повинні забезпечувати надійне функціонування і мати вбудовані механізми безпеки для захисту даних. Важливо забезпечити шифрування даних під час передачі та зберігання, а також підтримку аутентифікації пристроїв.
Пристрої повинні мати можливість бездротового підключення до мережі через Wi-Fi або інші протоколи, такі як Bluetooth або Zigbee. Інтеграція з центральною системою повинна бути безшовною, використовуючи стандартизовані протоколи обміну даними, наприклад, MQTT або HTTP.
Пристрої повинні забезпечувати високий рівень точності вимірювань для коректного відстеження моменту зняття товарів з полички. Важливо мінімізувати похибки і забезпечити стабільність показань у різних умовах експлуатації.
IoT пристрої повинні мати енергоефективний дизайн, забезпечуючи тривалий час роботи від батареї. Важливо використовувати технології зниження споживання енергії та оптимізувати роботу пристроїв для зменшення витрат енергії.
Пристрої повинні бути простими у встановленні та налаштуванні. Важливо забезпечити зручний інтерфейс для первинного налаштування і можливість віддаленого управління та оновлення прошивки.
Система повинна мати можливість моніторингу стану пристроїв у реальному часі, а також функціонал для управління та діагностики. Важливо мати можливість отримувати оперативні повідомлення про несправності та збої в роботі пристроїв.
Система повинна бути здатна підтримувати велику кількість IoT пристроїв, забезпечуючи ефективне управління та обробку даних з багатьох джерел одночасно. Важливо враховувати можливість масштабування при розширенні інфраструктури.
Пристрої та система загалом повинні відповідати міжнародним стандартам для IoT та безпеки даних. Це забезпечить сумісність з іншими системами та довгострокову надійність рішення.

 
4 СТРУКТУРА БАЗИ ДАНИХ
4.1 ER-моделювання


На рисунку 1.3 представлена ER-діаграма, яка відображає структуру бази даних системи управління складом. Кожна сутність в діаграмі представляє таблицю в базі даних, а атрибути сутностей відповідають стовпцям цих таблиць.

 
Рисунок 1.3 – ER-діаграма.

Товари:
	товар айді (bigint): Унікальний ідентифікатор товару.
	назва (varchar): Назва товару.
	опис (text): Опис товару.
	ціна (decimal): Ціна товару.
	знижка (decimal): Розмір знижки на товар.
	дата створення (timestamp): Дата створення запису.
	доступність кредитування (boolean): Показник, чи доступний товар для покупки в кредит.
	маса (decimal): Маса товару.
	габарити (varchar): Розміри товару.
	умови зберігання (text): Умови зберігання товару.
	гарантія (varchar): Інформація про гарантію на товар.
Ряди:
	ряд айді (bigint): Унікальний ідентифікатор ряду.
	номер ряду (bigint): Номер ряду в складі.
	номер початку місця (bigint): Номер місця початку ряду.
	кількість (bigint): Кількість місць в ряду.
Корзини:
	корзина айді (bigint): Унікальний ідентифікатор корзини.
	дата створення (timestamp): Дата створення корзини.
	статус (varchar): Статус корзини (активна, завершена тощо).
Покупці:
	покупець айді (bigint): Унікальний ідентифікатор покупця.
	ім'я (varchar): Ім'я покупця.
	прізвище (varchar): Прізвище покупця.
	по батькові (varchar): По батькові покупця.
	дата реєстрації (timestamp): Дата реєстрації покупця в системі.
	стать (varchar): Стать покупця.
	адреса (varchar): Адреса покупця.
	дата народження (date): Дата народження покупця.
	пошта (varchar): Електронна пошта покупця.
Покупки:
	дата додавання (timestamp): Дата додавання покупки.
	кількість (bigint): Кількість товарів у покупці.
	Способи доставки:
	спосіб доставки айді (bigint): Унікальний ідентифікатор способу доставки.
	назва способу (varchar): Назва способу доставки.
	дата створення (timestamp): Дата створення запису про спосіб доставки.
Категорії:
	категорія айді (bigint): Унікальний ідентифікатор категорії.
	назва категорії (varchar): Назва категорії.
	дата створення (timestamp): Дата створення запису про категорію.
ТовариСпособиДоставки:
	ТоварСпосібДоставки айді (bigint): Унікальний ідентифікатор зв'язку між товаром та способом доставки.
ТовариКатегорії:
	ТоварКатегоріяАйді (bigint): Унікальний ідентифікатор зв'язку між товаром та категорією.
Зв'язки між сутностями:
ER-діаграма на рисунку 1.2 також показує зв'язки між сутностями:
Покупці та Покупки:
Зв'язок між таблицею покупці та таблицею покупки відображає, що кожен покупець може мати декілька покупок.
Корзини та Покупки:
Зв'язок між таблицею корзини та таблицею покупки показує, що кожна корзина може містити декілька покупок.
Товари та Ряди:
Зв'язок між таблицею товари та таблицею ряди відображає, що кожен товар може зберігатися в певному ряду складу.
Товари та ТовариКатегорії:
Зв'язок між таблицею товари та таблицею ТовариКатегорії показує, що кожен товар може належати до кількох категорій.
Товари та ТовариСпособиДоставки:
Зв'язок між таблицею товари та таблицею ТовариСпособиДоставки відображає, що кожен товар може бути доставлений різними способами.
ТовариКатегорії та Категорії:
Зв'язок між таблицею ТовариКатегорії та таблицею категорії показує, що кожна категорія може включати декілька товарів.
ТовариСпособиДоставки та Способи Доставки:
Зв'язок між таблицею ТовариСпособиДоставки та таблицею способи доставки показує, що кожен спосіб доставки може бути застосований до декількох товарів. 
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ
5.1 Backend


Використані технології та їх особливості:
Мова програмування та фреймворк:
C# та ASP.NET Core: Основною мовою програмування є C#, а для розробки веб-API використовується фреймворк ASP.NET Core. Це дозволяє створювати високопродуктивні та масштабовані веб-додатки.
Обробка запитів та відповіді:
Контролери: Використання контролерів для обробки HTTP-запитів. Наприклад, Cards Controller обробляє запити для роботи з картками товарів на складі.
Атрибути маршрутизації: Використання атрибутів [Route] та [HttpGet], [HttpPost], [HttpPut], [HttpDelete] для визначення маршрутів та типів HTTP-запитів.
Зв'язок з базою даних:
Entity Framework Core: Використовується для взаємодії з базою даних. Це ORM, який дозволяє працювати з базою даних за допомогою C# об'єктів. Методи, такі як Include та ToListAsync, дозволяють виконувати асинхронні запити до бази даних та завантажувати пов'язані дані.
Асинхронні операції:
Асинхронне програмування: Використання ключових слів async та await для забезпечення асинхронного виконання операцій, що покращує продуктивність та масштабованість додатка.
Розглянемо приклад контролеру CardsController, який реалізовано за допомогою ASP.NET Core. Цей контролер забезпечує CRUD-операції (створення, читання, оновлення, видалення) для управління картками товарів на складі. Він використовує Entity Framework Core для взаємодії з базою даних, що дозволяє виконувати асинхронні запити та маніпуляції з даними. Використання атрибутів, таких як [HttpGet], [HttpPost], [HttpPut], [HttpDelete], визначає маршрути та типи HTTP-запитів для кожного методу контролера.
Наприклад, метод GetCards повертає список всіх карток з включеними пов'язаними даними про продукти та магазинні картки.
Цей підхід дозволяє ефективно керувати даними та забезпечує масштабованість та продуктивність системи управління складом.


5.2 Frontend


React використовується для створення користувацьких інтерфейсів завдяки компонентному підходу, який спрощує розробку та підтримку додатку. TypeScript, як надбудова над JavaScript, додає статичну типізацію, покращуючи читабельність коду та допомагаючи уникати помилок на етапі розробки. Для управління станом додатку застосовуються Redux або Context API, що дозволяють централізовано зберігати та управляти глобальним станом. React Router забезпечує маршрутизацію в додатках, дозволяючи створювати багатосторінкові додатки з клієнтською навігацією. Axios або Fetch API використовуються для виконання HTTP-запитів та взаємодії з серверною частиною через RESTful API. CSS-in-JS або CSS фреймворки, такі як Bootstrap чи Tailwind CSS, застосовуються для стилізації компонентів, забезпечуючи адаптивний та зручний дизайн інтерфейсу.

5.3 IoT


Програмна реалізація застосунку для емуляції поведінки IoT датчика включає кілька ключових аспектів. Спочатку створюється HTTP клієнт для взаємодії з сервером, формується URL запиту з параметром id, і створюється HTTP запит методу DELETE. Після відправки запиту відбувається обробка відповіді. У разі виникнення помилок під час відправки запиту, користувачу показується повідомлення з текстом помилки, що допомагає зрозуміти причину збою. Якщо введене значення не є числом, система виводить повідомлення "Invalid input", що дозволяє користувачу виправити помилку. Цей підхід імітує фізичну дію зняття товару з полички, що є типовим для IoT застосунків, де відправка даних на сервер триггерується певною подією. Це забезпечує інтеграцію фізичних процесів зі системою управління складом, підвищуючи ефективність і автоматизацію складських операцій. 
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ


Особливості застосування системи управління складом полягають у інтеграції сучасних технологій для підвищення ефективності та автоматизації складських процесів. Зокрема, система використовує IoT датчики для автоматичного відстеження моменту зняття товару з полички, що дозволяє оперативно оновлювати статус товару в системі. Це значно зменшує кількість ручних операцій і мінімізує помилки, пов'язані з людським фактором.
Використання сучасних веб-технологій, таких як React і TypeScript, забезпечує створення зручного і інтуїтивно зрозумілого інтерфейсу для користувачів. Цей інтерфейс дозволяє легко керувати обліком замовників, товарами на складі, замовленнями користувачів, способами доставки, категоріями товарів та їх розміщенням на складі. Завдяки компонентному підходу до розробки інтерфейсу, кожен аспект управління може бути легко адаптований або розширений відповідно до потреб бізнесу.
Автоматизація процесів видачі товару за допомогою IoT датчиків не тільки прискорює роботу складу, але й покращує точність обліку товарів. Дані, зібрані з датчиків, передаються в режимі реального часу до центральної системи, що дозволяє відстежувати стан запасів і оперативно реагувати на зміни. Це особливо важливо для великих складів з великим обсягом товарообігу, де навіть невеликі затримки або помилки можуть призвести до значних втрат.
Загалом, впровадження цієї системи управління складом дозволяє значно підвищити ефективність роботи складу, зменшити витрати на управління запасами, покращити точність обліку та забезпечити високу продуктивність операцій. 
ВИСНОВКИ


У ході виконаної роботи було розроблено комплексну систему управління складом, яка поєднує сучасні веб-технології та IoT рішення для підвищення ефективності складських операцій. Використання ASP.NET Core для серверної частини забезпечило надійну та масштабовану базу для обробки даних. Реалізація фронтенду за допомогою React і TypeScript дозволила створити інтуїтивний і зручний інтерфейс для користувачів, що спрощує управління складськими процесами.
Інтеграція IoT датчиків для автоматичного відстеження зняття товарів з поличок забезпечила оперативне оновлення даних у системі, зменшуючи кількість ручних операцій і підвищуючи точність обліку. Це дозволяє швидко реагувати на зміни в запасах, покращуючи загальну продуктивність складу.
Розроблена система включає функціонал для обліку замовників, управління товарами на складі, обліку замовлень користувачів, менеджменту способів доставки, класифікації товарів за категоріями та управління розміщенням товарів на складі. Автоматизація процесів видачі товару за допомогою IoT датчиків забезпечила більш точний і ефективний контроль над складськими операціями.
Загалом, розроблена система управління складом відповідає сучасним вимогам до автоматизації та ефективного управління складськими процесами, забезпечуючи високу продуктивність, надійність і зручність для користувачів. 
ПЕРЕЛІК ДЖЕРЕЛ


1.	ASP.NET Core Documentation: Офіційна документація з прикладами та детальними поясненнями використання фреймворку. URL: https://docs.microsoft.com/en-us/aspnet/core/. (дата звернення 12.05.2024)
2.	Entity Framework Core Documentation: Посібник з використання ORM для взаємодії з базою даних. URL: https://docs.microsoft.com/en-us/ef/core/. (дата звернення 12.05.2024)
3.	React Documentation: Офіційна документація для бібліотеки React. URL: https://reactjs.org/docs/getting-started.html. (дата звернення 12.05.2024)
4.	TypeScript Documentation: Офіційна документація для мови програмування TypeScript. URL: https://www.typescriptlang.org/docs/. (дата звернення 12.05.2024)
5.	Redux Documentation: Посібник з використання Redux для управління станом додатку. URL: https://redux.js.org/introduction/getting-started. (дата звернення 12.05.2024)
6.	React Router Documentation: Офіційна документація для бібліотеки React Router. URL: https://reactrouter.com/web/guides/quick-start. (дата звернення 12.05.2024)
7.	Axios Documentation: Офіційна документація для бібліотеки Axios. URL: https://axios-http.com/docs/intro. (дата звернення 12.05.2024)
8.	Bootstrap Documentation: Офіційна документація для CSS фреймворку Bootstrap. URL: https://getbootstrap.com/docs/5.0/getting-started/introduction/. (дата звернення 12.05.2024)
9.	Swagger Documentation: Інструмент для автоматичної генерації документації API. URL: https://swagger.io/docs/. (дата звернення 12.05.2024)
10.	Microsoft Dev Blogs: Статті та новини щодо останніх оновлень та практик у .NET екосистемі. URL: https://devblogs.microsoft.com/. (дата звернення 12.05.2024)
11.	Pluralsight Courses: Курси для глибокого вивчення ASP.NET Core та Entity Framework Core. URL: https://www.pluralsight.com/. (дата звернення 12.05.2024)
12.	Stack Overflow: Спільнота для програмістів, де можна знайти відповіді на технічні питання щодо ASP.NET Core та Entity Framework Core. URL: https://stackoverflow.com/. (дата звернення 12.05.2024)
